{"version":3,"sources":["../../src/query/query-runner.js"],"names":["fs","require","report","path","_","store","boundActionCreators","pageDataUtil","getCodeFrame","default","errorParser","resultHashes","Map","module","exports","graphqlRunner","queryJob","program","getState","graphql","query","context","promise","isPending","timeoutId","setTimeout","messageParts","componentPath","isPage","push","isEmpty","JSON","stringify","warn","join","finally","clearTimeout","result","errors","urlPath","undefined","queryContext","plugin","pluginCreatorId","structuredErrors","map","e","structuredError","message","codeFrame","locations","line","column","filePath","filter","Boolean","panicOnBuild","Object","assign","pageContext","internalComponentName","component","componentChunkName","updatedAt","pluginCreator___NODE","isCreatedByStatefulCreatePages","resultJSON","resultHash","createHash","update","digest","get","id","set","publicDir","directory","pages","page","write","resultPath","hash","outputFile","pageQueryRun","process","env","GATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES","setPageData"],"mappings":"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","sourcesContent":["// @flow\n\nconst fs = require(`fs-extra`)\nconst report = require(`gatsby-cli/lib/reporter`)\n\nconst path = require(`path`)\nconst _ = require(`lodash`)\nconst { store } = require(`../redux`)\nconst { boundActionCreators } = require(`../redux/actions`)\nconst pageDataUtil = require(`../utils/page-data`)\nconst { getCodeFrame } = require(`./graphql-errors`)\nconst { default: errorParser } = require(`./error-parser`)\n\nconst resultHashes = new Map()\n\ntype QueryJob = {\n  id: string,\n  hash?: string,\n  query: string,\n  componentPath: string,\n  context: Object,\n  isPage: Boolean,\n}\n\n// Run query\nmodule.exports = async (graphqlRunner, queryJob: QueryJob) => {\n  const { program } = store.getState()\n\n  const graphql = (query, context) => {\n    // Check if query takes too long, print out warning\n    const promise = graphqlRunner.query(query, context)\n    let isPending = true\n\n    const timeoutId = setTimeout(() => {\n      if (isPending) {\n        const messageParts = [\n          `Query takes too long:`,\n          `File path: ${queryJob.componentPath}`,\n        ]\n\n        if (queryJob.isPage) {\n          const { path, context } = queryJob.context\n          messageParts.push(`URL path: ${path}`)\n\n          if (!_.isEmpty(context)) {\n            messageParts.push(`Context: ${JSON.stringify(context, null, 4)}`)\n          }\n        }\n\n        report.warn(messageParts.join(`\\n`))\n      }\n    }, 15000)\n\n    promise.finally(() => {\n      isPending = false\n      clearTimeout(timeoutId)\n    })\n\n    return promise\n  }\n\n  // Run query\n  let result\n  // Nothing to do if the query doesn't exist.\n  if (!queryJob.query || queryJob.query === ``) {\n    result = {}\n  } else {\n    result = await graphql(queryJob.query, queryJob.context)\n  }\n\n  // If there's a graphql error then log the error. If we're building, also\n  // quit.\n  if (result && result.errors) {\n    let urlPath = undefined\n    let queryContext = {}\n    const plugin = queryJob.pluginCreatorId || `none`\n\n    if (queryJob.isPage) {\n      urlPath = queryJob.context.path\n      queryContext = queryJob.context.context\n    }\n\n    const structuredErrors = result.errors\n      .map(e => {\n        const structuredError = errorParser({\n          message: e.message,\n        })\n\n        structuredError.context = {\n          ...structuredError.context,\n          codeFrame: getCodeFrame(\n            queryJob.query,\n            e.locations && e.locations[0].line,\n            e.locations && e.locations[0].column\n          ),\n          filePath: queryJob.componentPath,\n          ...(urlPath && { urlPath }),\n          ...queryContext,\n          plugin,\n        }\n\n        return structuredError\n      })\n      .filter(Boolean)\n\n    report.panicOnBuild(structuredErrors)\n  }\n\n  // Add the page context onto the results.\n  if (queryJob && queryJob.isPage) {\n    result[`pageContext`] = Object.assign({}, queryJob.context)\n  }\n\n  // Delete internal data from pageContext\n  if (result.pageContext) {\n    delete result.pageContext.path\n    delete result.pageContext.internalComponentName\n    delete result.pageContext.component\n    delete result.pageContext.componentChunkName\n    delete result.pageContext.updatedAt\n    delete result.pageContext.pluginCreator___NODE\n    delete result.pageContext.pluginCreatorId\n    delete result.pageContext.componentPath\n    delete result.pageContext.context\n    delete result.pageContext.isCreatedByStatefulCreatePages\n  }\n\n  const resultJSON = JSON.stringify(result)\n  const resultHash = require(`crypto`)\n    .createHash(`sha1`)\n    .update(resultJSON)\n    .digest(`base64`)\n  if (resultHash !== resultHashes.get(queryJob.id)) {\n    resultHashes.set(queryJob.id, resultHash)\n\n    if (queryJob.isPage) {\n      const publicDir = path.join(program.directory, `public`)\n      const { pages } = store.getState()\n      const page = pages.get(queryJob.id)\n      await pageDataUtil.write({ publicDir }, page, result)\n    } else {\n      // The babel plugin is hard-coded to load static queries from\n      // public/static/d/\n      const resultPath = path.join(\n        program.directory,\n        `public`,\n        `static`,\n        `d`,\n        `${queryJob.hash}.json`\n      )\n      await fs.outputFile(resultPath, resultJSON)\n    }\n  }\n\n  boundActionCreators.pageQueryRun({\n    path: queryJob.id,\n    componentPath: queryJob.componentPath,\n    isPage: queryJob.isPage,\n  })\n\n  // Sets pageData to the store, here for easier access to the resultHash\n  if (\n    process.env.GATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES &&\n    queryJob.isPage\n  ) {\n    boundActionCreators.setPageData({\n      id: queryJob.id,\n      resultHash,\n    })\n  }\n  return result\n}\n"],"file":"query-runner.js"}