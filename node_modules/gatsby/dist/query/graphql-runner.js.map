{"version":3,"sources":["../../src/query/graphql-runner.ts"],"names":["GraphQLRunner","constructor","store","collectStats","schema","schemaCustomization","getState","nodeModel","LocalNodeModel","nodeStore","schemaComposer","composer","createPageDependency","parseCache","Map","validDocuments","WeakSet","scheduleClearCache","clearCache","bind","stats","totalQueries","uniqueOperations","Set","uniqueQueries","totalRunQuery","totalPluralRunQuery","totalIndexHits","totalSiftHits","totalNonSingleFilters","comparatorsUsed","uniqueFilterPaths","uniqueSorts","clear","parse","query","has","set","get","validate","document","errors","length","add","getStats","comparatorsUsedObj","forEach","value","key","push","comparator","amount","size","context","statsQuery","body","crypto","createHash","update","v8","serialize","digest","result","rootValue","contextValue","customContext","variableValues","Promise","resolve"],"mappings":"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","sourcesContent":["import crypto from \"crypto\"\nimport v8 from \"v8\"\nimport {\n  parse,\n  validate,\n  execute,\n  DocumentNode,\n  GraphQLSchema,\n  Source,\n  GraphQLError,\n  ExecutionResult,\n} from \"graphql\"\nimport { debounce } from \"lodash\"\nimport * as nodeStore from \"../db/nodes\"\nimport { createPageDependency } from \"../redux/actions/add-page-dependency\"\n\nimport withResolverContext from \"../schema/context\"\nimport { LocalNodeModel } from \"../schema/node-model\"\nimport { Store } from \"redux\"\nimport { IGatsbyState } from \"../redux/types\"\n\ntype Query = string | Source\n\ninterface IGraphQLRunnerStats {\n  totalQueries: number\n  uniqueOperations: Set<string>\n  uniqueQueries: Set<string>\n  totalRunQuery: number\n  totalPluralRunQuery: number\n  totalIndexHits: number\n  totalSiftHits: number\n  totalNonSingleFilters: number\n  comparatorsUsed: Map<string, number>\n  uniqueFilterPaths: Set<string>\n  uniqueSorts: Set<string>\n}\n\ninterface IGraphQLRunnerStatResults {\n  totalQueries: number\n  uniqueOperations: number\n  uniqueQueries: number\n  totalRunQuery: number\n  totalPluralRunQuery: number\n  totalIndexHits: number\n  totalSiftHits: number\n  totalNonSingleFilters: number\n  comparatorsUsed: Array<{ comparator: string; amount: number }>\n  uniqueFilterPaths: number\n  uniqueSorts: number\n}\n\nexport default class GraphQLRunner {\n  parseCache: Map<Query, DocumentNode>\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  nodeModel: any // TODO: convert \"../schema/node-model\" from Flow\n\n  schema: GraphQLSchema\n\n  validDocuments: WeakSet<DocumentNode>\n  scheduleClearCache: () => void\n\n  stats: IGraphQLRunnerStats | null\n\n  constructor(\n    protected store: Store<IGatsbyState>,\n    {\n      collectStats,\n    }: {\n      collectStats?: boolean\n    } = {}\n  ) {\n    const { schema, schemaCustomization } = this.store.getState()\n\n    this.nodeModel = new LocalNodeModel({\n      nodeStore,\n      schema,\n      schemaComposer: schemaCustomization.composer,\n      createPageDependency,\n    })\n    this.schema = schema\n    this.parseCache = new Map()\n    this.validDocuments = new WeakSet()\n    this.scheduleClearCache = debounce(this.clearCache.bind(this), 5000)\n\n    if (collectStats) {\n      this.stats = {\n        totalQueries: 0,\n        uniqueOperations: new Set(),\n        uniqueQueries: new Set(),\n        totalRunQuery: 0,\n        totalPluralRunQuery: 0,\n        totalIndexHits: 0,\n        totalSiftHits: 0,\n        totalNonSingleFilters: 0,\n        comparatorsUsed: new Map(),\n        uniqueFilterPaths: new Set(),\n        uniqueSorts: new Set(),\n      }\n    } else {\n      this.stats = null\n    }\n  }\n\n  clearCache(): void {\n    this.parseCache.clear()\n    this.validDocuments = new WeakSet()\n  }\n\n  parse(query: Query): DocumentNode {\n    if (!this.parseCache.has(query)) {\n      this.parseCache.set(query, parse(query))\n    }\n    return this.parseCache.get(query) as DocumentNode\n  }\n\n  validate(\n    schema: GraphQLSchema,\n    document: DocumentNode\n  ): readonly GraphQLError[] {\n    if (!this.validDocuments.has(document)) {\n      const errors = validate(schema, document)\n      if (!errors.length) {\n        this.validDocuments.add(document)\n      }\n      return errors as Array<GraphQLError>\n    }\n    return []\n  }\n\n  getStats(): IGraphQLRunnerStatResults | null {\n    if (this.stats) {\n      const comparatorsUsedObj: Array<{\n        comparator: string\n        amount: number\n      }> = []\n      this.stats.comparatorsUsed.forEach((value, key) => {\n        comparatorsUsedObj.push({ comparator: key, amount: value })\n      })\n      return {\n        totalQueries: this.stats.totalQueries,\n        uniqueOperations: this.stats.uniqueOperations.size,\n        uniqueQueries: this.stats.uniqueQueries.size,\n        totalRunQuery: this.stats.totalRunQuery,\n        totalPluralRunQuery: this.stats.totalPluralRunQuery,\n        totalIndexHits: this.stats.totalIndexHits,\n        totalSiftHits: this.stats.totalSiftHits,\n        totalNonSingleFilters: this.stats.totalNonSingleFilters,\n        comparatorsUsed: comparatorsUsedObj,\n        uniqueFilterPaths: this.stats.uniqueFilterPaths.size,\n        uniqueSorts: this.stats.uniqueSorts.size,\n      }\n    } else {\n      return null\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  query(query: Query, context: Record<string, any>): Promise<ExecutionResult> {\n    const { schema, schemaCustomization } = this.store.getState()\n\n    if (this.schema !== schema) {\n      this.schema = schema\n      this.clearCache()\n    }\n\n    if (this.stats) {\n      this.stats.totalQueries++\n      let statsQuery = query\n      if (typeof statsQuery !== `string`) {\n        statsQuery = statsQuery.body\n      }\n      this.stats.uniqueOperations.add(\n        crypto\n          .createHash(`sha1`)\n          .update(statsQuery)\n          .update(v8.serialize(context))\n          .digest(`hex`)\n      )\n\n      this.stats.uniqueQueries.add(\n        crypto.createHash(`sha1`).update(statsQuery).digest(`hex`)\n      )\n    }\n\n    const document = this.parse(query)\n    const errors = this.validate(schema, document)\n\n    const result =\n      errors.length > 0\n        ? { errors }\n        : execute({\n            schema,\n            document,\n            rootValue: context,\n            contextValue: withResolverContext({\n              schema,\n              schemaComposer: schemaCustomization.composer,\n              context,\n              customContext: schemaCustomization.context,\n              nodeModel: this.nodeModel,\n              stats: this.stats,\n            }),\n            variableValues: context,\n          })\n\n    // Queries are usually executed in batch. But after the batch is finished\n    // cache just wastes memory without much benefits.\n    // TODO: consider a better strategy for cache purging/invalidation\n    this.scheduleClearCache()\n    return Promise.resolve(result)\n  }\n}\n"],"file":"graphql-runner.js"}