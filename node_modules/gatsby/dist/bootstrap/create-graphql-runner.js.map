{"version":3,"sources":["../../src/bootstrap/create-graphql-runner.ts"],"names":["createGraphQLRunner","store","reporter","runner","GraphQLRunner","eventTypes","forEach","type","emitter","on","query","context","then","result","errors","structuredErrors","map","e","file","stackTrace","parse","find","test","getFunctionName","structuredError","message","location","start","line","getLineNumber","column","getColumnNumber","filePath","getFileName","fromGraphQLFunction","filter","Boolean","length","panicOnBuild"],"mappings":";;;;;;;AAAA;;AAIA;;AACA;;AACA;;AAUO,MAAMA,mBAAmB,GAAG,CACjCC,KADiC,EAEjCC,QAFiC,KAGtB;AACX;AACA,MAAIC,MAAM,GAAG,IAAIC,sBAAJ,CAAkBH,KAAlB,CAAb;AAEA,QAAMI,UAAoB,GAAG,CAC1B,cAD0B,EAE1B,aAF0B,EAG1B,aAH0B,EAI1B,cAJ0B,EAK1B,qBAL0B,EAM1B,YAN0B,EAO1B,mBAP0B,EAQ1B,+BAR0B,CAA7B;AAWAA,EAAAA,UAAU,CAACC,OAAX,CAAmBC,IAAI,IAAI;AACzBC,mBAAQC,EAAR,CAAWF,IAAX,EAAiB,MAAM;AACrBJ,MAAAA,MAAM,GAAG,IAAIC,sBAAJ,CAAkBH,KAAlB,CAAT;AACD,KAFD;AAGD,GAJD;AAMA,SAAO,CAACS,KAAD,EAAQC,OAAR,KACLR,MAAM,CAACO,KAAP,CAAaA,KAAb,EAAoBC,OAApB,EAA6BC,IAA7B,CAAkCC,MAAM,IAAI;AAC1C,QAAIA,MAAM,CAACC,MAAX,EAAmB;AACjB,YAAMC,gBAAgB,GAAGF,MAAM,CAACC,MAAP,CACtBE,GADsB,CAClBC,CAAC,IAAI;AACR;AACA,cAAMC,IAAI,GAAGC,oBACVC,KADU,CACJH,CADI,EAEVI,IAFU,CAELH,IAAI,IAAI,cAAcI,IAAd,CAAmBJ,IAAI,CAACK,eAAL,EAAnB,CAFH,CAAb;;AAIA,YAAIL,IAAJ,EAAU;AACR,gBAAMM,eAAe,GAAG,0BAAY;AAClCC,YAAAA,OAAO,EAAER,CAAC,CAACQ,OADuB;AAElCC,YAAAA,QAAQ,EAAE;AACRC,cAAAA,KAAK,EAAE;AACLC,gBAAAA,IAAI,EAAEV,IAAI,CAACW,aAAL,EADD;AAELC,gBAAAA,MAAM,EAAEZ,IAAI,CAACa,eAAL;AAFH;AADC,aAFwB;AAQlCC,YAAAA,QAAQ,EAAEd,IAAI,CAACe,WAAL;AARwB,WAAZ,CAAxB;AAUAT,UAAAA,eAAe,CAACb,OAAhB,GAA0B,EACxB,GAAGa,eAAe,CAACb,OADK;AAExBuB,YAAAA,mBAAmB,EAAE;AAFG,WAA1B;AAIA,iBAAOV,eAAP;AACD;;AAED,eAAO,IAAP;AACD,OA1BsB,EA2BtBW,MA3BsB,CA2BfC,OA3Be,CAAzB;;AA6BA,UAAIrB,gBAAgB,CAACsB,MAArB,EAA6B;AAC3B;AACAnC,QAAAA,QAAQ,CAACoC,YAAT,CAAsBvB,gBAAtB;AACD;AACF;;AAED,WAAOF,MAAP;AACD,GAtCD,CADF;AAwCD,CAhEM","sourcesContent":["import stackTrace from \"stack-trace\"\nimport { ExecutionResultDataDefault } from \"graphql/execution/execute\"\nimport { Store } from \"redux\"\n\nimport GraphQLRunner from \"../query/graphql-runner\"\nimport errorParser from \"../query/error-parser\"\nimport { emitter } from \"../redux\"\nimport { Reporter } from \"../..\"\nimport { ExecutionResult, Source } from \"../../graphql\"\nimport { IGatsbyState } from \"../redux/types\"\n\ntype Runner = (\n  query: string | Source,\n  context: Record<string, any>\n) => Promise<ExecutionResult<ExecutionResultDataDefault>>\n\nexport const createGraphQLRunner = (\n  store: Store<IGatsbyState>,\n  reporter: Reporter\n): Runner => {\n  // TODO: Move tracking of changed state inside GraphQLRunner itself. https://github.com/gatsbyjs/gatsby/issues/20941\n  let runner = new GraphQLRunner(store)\n\n  const eventTypes: string[] = [\n    `DELETE_CACHE`,\n    `CREATE_NODE`,\n    `DELETE_NODE`,\n    `DELETE_NODES`,\n    `SET_SCHEMA_COMPOSER`,\n    `SET_SCHEMA`,\n    `ADD_FIELD_TO_NODE`,\n    `ADD_CHILD_NODE_TO_PARENT_NODE`,\n  ]\n\n  eventTypes.forEach(type => {\n    emitter.on(type, () => {\n      runner = new GraphQLRunner(store)\n    })\n  })\n\n  return (query, context): ReturnType<Runner> =>\n    runner.query(query, context).then(result => {\n      if (result.errors) {\n        const structuredErrors = result.errors\n          .map(e => {\n            // Find the file where graphql was called.\n            const file = stackTrace\n              .parse(e)\n              .find(file => /createPages/.test(file.getFunctionName()))\n\n            if (file) {\n              const structuredError = errorParser({\n                message: e.message,\n                location: {\n                  start: {\n                    line: file.getLineNumber(),\n                    column: file.getColumnNumber(),\n                  },\n                },\n                filePath: file.getFileName(),\n              })\n              structuredError.context = {\n                ...structuredError.context,\n                fromGraphQLFunction: true,\n              }\n              return structuredError\n            }\n\n            return null\n          })\n          .filter(Boolean)\n\n        if (structuredErrors.length) {\n          // panic on build exits the process\n          reporter.panicOnBuild(structuredErrors)\n        }\n      }\n\n      return result\n    })\n}\n"],"file":"create-graphql-runner.js"}