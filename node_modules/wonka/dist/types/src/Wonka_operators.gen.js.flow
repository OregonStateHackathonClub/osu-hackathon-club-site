// @flow

import type { operatorT as Wonka_types_operatorT } from "./Wonka_types.gen";
import type { sourceT as Wonka_types_sourceT } from "./Wonka_types.gen";
declare export var buffer: <a, b>(
  _1: Wonka_types_sourceT<a>
) => Wonka_types_operatorT<b, b[]>;
declare export var combine: <a, b>(
  _1: Wonka_types_sourceT<a>,
  _2: Wonka_types_sourceT<b>
) => Wonka_types_sourceT<[a, b]>;
declare export var concatMap: <a, b>(
  _1: (_1: a) => Wonka_types_sourceT<b>
) => Wonka_types_operatorT<a, b>;
declare export var concatAll: <a>(
  _1: Wonka_types_sourceT<Wonka_types_sourceT<a>>
) => Wonka_types_sourceT<a>;
declare export var concat: <a>(
  _1: Wonka_types_sourceT<a>[]
) => Wonka_types_sourceT<a>;
declare export var filter: <a>(
  _1: (_1: a) => boolean
) => Wonka_types_operatorT<a, a>;
declare export var map: <a, b>(_1: (_1: a) => b) => Wonka_types_operatorT<a, b>;
declare export var mergeMap: <a, b>(
  _1: (_1: a) => Wonka_types_sourceT<b>
) => Wonka_types_operatorT<a, b>;
declare export var merge: <a>(
  _1: Wonka_types_sourceT<a>[]
) => Wonka_types_sourceT<a>;
declare export var mergeAll: <a>(
  _1: Wonka_types_sourceT<Wonka_types_sourceT<a>>
) => Wonka_types_sourceT<a>;
declare export var flatten: <T1>(
  _1: Wonka_types_sourceT<Wonka_types_sourceT<T1>>
) => Wonka_types_sourceT<T1>;
declare export var onEnd: <a>(_1: () => void) => Wonka_types_operatorT<a, a>;
declare export var onPush: <a>(
  _1: (_1: a) => void
) => Wonka_types_operatorT<a, a>;
declare export var tap: <T1>(
  _1: (_1: T1) => void
) => Wonka_types_operatorT<T1, T1>;
declare export var onStart: <a>(_1: () => void) => Wonka_types_operatorT<a, a>;
declare export var sample: <a, b>(
  _1: Wonka_types_sourceT<a>
) => Wonka_types_operatorT<b, b>;
declare export var scan: <a, acc>(
  _1: (_1: acc, _2: a) => acc,
  _2: acc
) => Wonka_types_operatorT<a, acc>;
declare export var share: <a>(
  _1: Wonka_types_sourceT<a>
) => Wonka_types_sourceT<a>;
declare export var skip: <a>(_1: number) => Wonka_types_operatorT<a, a>;
declare export var skipUntil: <a, b>(
  _1: Wonka_types_sourceT<a>
) => Wonka_types_operatorT<b, b>;
declare export var skipWhile: <a>(
  _1: (_1: a) => boolean
) => Wonka_types_operatorT<a, a>;
declare export var switchMap: <a, b>(
  _1: (_1: a) => Wonka_types_sourceT<b>
) => Wonka_types_operatorT<a, b>;
declare export var switchAll: <a>(
  _1: Wonka_types_sourceT<Wonka_types_sourceT<a>>
) => Wonka_types_sourceT<a>;
declare export var take: <a>(_1: number) => Wonka_types_operatorT<a, a>;
declare export var takeLast: <a>(_1: number) => Wonka_types_operatorT<a, a>;
declare export var takeUntil: <a, b>(
  _1: Wonka_types_sourceT<a>
) => Wonka_types_operatorT<b, b>;
declare export var takeWhile: <a>(
  _1: (_1: a) => boolean
) => Wonka_types_operatorT<a, a>;
