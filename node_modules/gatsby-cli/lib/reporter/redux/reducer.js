"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.reducer = void 0;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _constants = require("../constants");

const reducer = (state = {
  messages: [],
  activities: {},
  status: ``
}, action) => {
  switch (action.type) {
    case _constants.Actions.SetStatus:
      {
        return Object.assign({}, state, {
          status: action.payload
        });
      }

    case _constants.Actions.Log:
      {
        if (!action.payload.text) {
          // set empty character to fix ink
          action.payload.text = `\u2800`;
        }

        return Object.assign({}, state, {
          messages: [...state.messages, action.payload]
        });
      }

    case _constants.Actions.StartActivity:
      {
        const id = action.payload.id;
        return Object.assign({}, state, {
          activities: Object.assign({}, state.activities, {
            [id]: action.payload
          })
        });
      }

    case _constants.Actions.UpdateActivity:
    case _constants.Actions.PendingActivity:
      {
        const _action$payload = action.payload,
              id = _action$payload.id,
              rest = (0, _objectWithoutPropertiesLoose2.default)(_action$payload, ["id"]);
        const activity = state.activities[id];
        return Object.assign({}, state, {
          activities: Object.assign({}, state.activities, {
            [id]: Object.assign({}, activity, {}, rest)
          })
        });
      }

    case _constants.Actions.ActivityErrored:
      {
        const id = action.payload.id;
        const activity = state.activities[id];
        return Object.assign({}, state, {
          activities: Object.assign({}, state.activities, {
            [id]: Object.assign({}, activity, {
              errored: true
            })
          })
        });
      }

    case _constants.Actions.EndActivity:
    case _constants.Actions.CancelActivity:
      {
        const _action$payload2 = action.payload,
              id = _action$payload2.id,
              status = _action$payload2.status,
              duration = _action$payload2.duration;
        const activity = state.activities[id];

        if (!activity) {
          return state;
        }

        const activities = Object.assign({}, state.activities);
        activities[id] = Object.assign({}, activity, {
          status,
          duration
        });
        return Object.assign({}, state, {
          activities
        });
      }

    case _constants.Actions.SetLogs:
      {
        return action.payload;
      }
  }

  return state;
};

exports.reducer = reducer;